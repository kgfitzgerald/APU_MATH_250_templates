---
title: "AE-04: Flights - data wrangling II"
subtitle: "submit at end of class (exit ticket)"
author: "YOUR NAME HERE"
date: "`r Sys.Date()`"
format: 
  html:
    self-contained: true
    toc: true
    toc_float: true
    number_section: false
    highlight: "tango"
    theme: "cosmo"
editor: visual
editor_options: 
  chunk_output_type: console
---

We will again work with data from the `nycflights13` package.

```{r}
#| label: load-packages
#| message: false
library(nycflights13)
library(tidyverse)
```

## Exercise 1

Examine the documentation for the datasets `airports`, `flights`, and `planes`. What are the dimensions of each? How are these datasets related?

> YOUR ANSWER HERE

Suppose you wanted to make a map of the route of every flight. What variables would you need from which datasets? You need the geographic location of the airports (from `airports`) and the path of flights (i.e., which airports were involved) from `flights`.

We want to join flights to airports. Note these two datasets have no variables in common so we will have to specify the variable to join by using `by =`. Check out the documentation for more information.

```{r}
flights |> 
  left_join(airports, by = c("dest" = "faa"))
```

## Exercise 2

Create a new dataset `dest_delays` with the median arrival delay for each destination. *Note this question does not require you to use joins. Make sure to add na.rm = TRUE when computing the median. Check: `dest_delays` should have dimensions 105 x 2.*

```{r}

```

## Exercise 3

Create a new dataset `delays_by_airport` by joining `dest_delays` and `airports`. Only include observations that have both delay and airport information. *Note `dest_delays` and `airports` have no variables in common so you will need to specify the variables to join using by as in the example above. Check: `delays_by_airport`* *should have dimensions 101 x 9.*

```{r}

```

## Exercise 4

Are all of the rows in `dest_delays` included in the new dataset you created by joining `dest_delays` and `airports`? Use an `anti_join` to help investigate this issue. Recall `anti_join(x,y)` returns all rows from `x` without a match in `y`.

```{r}

```

Where are the above airports are located? *Hint: Google them*

## Exercise 5

***Is there a relationship between the age of a plane and its delays?*** The plane tail number is given in the `tailnum` variable in the `flights` dataset. The year the plane was manufactured is given in the `year` variable in the `planes` dataset.

Start by finding the median arrival delay for each plane and store the resulting dataset in `plane_delays`. *Check: `plane_delays`* *should have dimensions 4044 x 2*

```{r}

```

Join `plane_delays` to the `planes` data using an appropriate join and then use `mutate` to create an `age` variable. Note this data is from 2013.

```{r}

```

Finally, create an effective visualization of the data to investigate if there a relationship between the age of a plane and its delays. Comment on your conclusions.

```{r}

```

## BONUS / Extra mapping fun

Try re-creating the visualization below and/or exploring other ways to visualized the flights data spatially. *Note, to view the image, check the "images" folder in your MATH_250 project and make sure there is a file called "flights_map.png". If there isn't, you can download the image from our course GitHub repo and place it in the "images" folder)*

![](images/flights_map.png)

Some starter code is provided below for creating a basic US map.

```{r}
#| warning: false
#| message: false
library(maps)
library(mapdata)

state <- map_data("state")

ggplot() + 
  geom_polygon(data = state, 
               aes(x = long, y = lat, group = group),
               fill = 'lightblue', color = "white") +
  theme_void() +
  coord_fixed(1.3)
```

Adding on the flight trajectories will require some creative data wrangling. Hint: you will need a dataframe with at least 7 columns: the airport ID, latitude & longitude for both the origin and destination airports, and a count column of the number of flights between those dest-origin airports. You can use a `geom_curve()` layer to create the flight curves; the above plot has `curvature = 0.2`.

```{r}

```

## Submission & Grading

At the end of class, you should submit your .html file to the appropriate AE assignment on Canvas. This serves as your "exit ticket" for today's class.

It is okay if you did not complete all the exercises - it is helpful for me to see your progress, and you will receive full credit (10pts) if you made a good faith effort on the assignment.

You are encouraged to complete any remaining exercises on your own, but you do not need to re-submit your assignment to Canvas.

If you were unable to attend class, you may still submit your AE for half credit (5pts). The two lowest AE scores will be dropped at the end of the semester to accommodate occasional absences.
